knitr::opts_chunk$set(echo = TRUE)
Health <- read.csv("C:\\Users\\Grace\\Downloads\\500_Cities__Local_Data_for_Better_Health__2019_release_20250331.csv")
Health <- read.csv("C:\\Users\\Grace\\Downloads\\500_Cities__Local_Data_for_Better_Health__2019_release_20250331.csv")
Health <- read.csv("https://iastate.box.com/s/2nlkl3rjb260v8w7h9hlt0md71tsanmc")
Health <- read.csv("https://iastate.box.com/s/2nlkl3rjb260v8w7h9hlt0md71tsanmc", row.names=NULL)
View(Health)
library(boxr)
import.packages("boxr")
install.packages("boxr")
install.packages("boxr")
library(boxr)
box_auth()
knitr::opts_chunk$set(echo = TRUE)
Health <- read.csv("C:\\Users\\songb\\Downloads\\500_Cities__Local_Data_for_Better_Health__2019_release_20250331.csv")
head(Health)
dim(Health)
str(Health)
summary(Health)
Health[complete.cases(Health), ]
Health <- Health[complete.cases(Health), ]
View(Health)
health_wide <- Health %>% pivot_wider(names_from = MeasureId, values_from = c(Data_Value, Low_Confidence_Limit, High_Confidence_Limit))
library(tidyverse)
health_wide <- Health %>% pivot_wider(names_from = MeasureId, values_from = c(Data_Value, Low_Confidence_Limit, High_Confidence_Limit))
View(health_wide)
health_wide_two <- Health %>%
group_by(Year, StateDesc, CityName, MeasureID) %>%
summarize(
Data_Value = mean(Data_Value, na.rm = TRUE),
Confidence_Limit = mean(Confidence_Limit, na.rm = TRUE),
.groups = "drop"
) %>%
pivot_wider(names_from = MeasureID, values_from = c(Data_Value, Low_Confidence_Limit, High_Confidence_Limit))
View(Health)
health_wide_two <- Health %>%
group_by(Year, StateDesc, CityName, MeasureId) %>%
summarize(
Data_Value = mean(Data_Value, na.rm = TRUE),
Confidence_Limit = mean(Confidence_Limit, na.rm = TRUE),
.groups = "drop"
) %>%
pivot_wider(names_from = MeasureID, values_from = c(Data_Value, Low_Confidence_Limit, High_Confidence_Limit))
health_wide_two <- Health %>%
group_by(Year, StateDesc, CityName, MeasureId) %>%
summarize(
Data_Value = mean(Data_Value, na.rm = TRUE)
) %>%
pivot_wider(names_from = MeasureID, values_from = c(Data_Value, Low_Confidence_Limit, High_Confidence_Limit))
health_wide_two <- Health %>%
group_by(Year, StateDesc, CityName, MeasureId) %>%
summarize(
Data_Value = mean(Data_Value, na.rm = TRUE)
) %>%
pivot_wider(names_from = MeasureId, values_from = c(Data_Value, Low_Confidence_Limit, High_Confidence_Limit))
health_wide_two <- Health %>%
group_by(Year, StateDesc, CityName, MeasureId) %>%
summarize(
Data_Value = mean(Data_Value, na.rm = TRUE)
) %>%
pivot_wider(names_from = MeasureId, values_from = c(Data_Value, Low_Confidence_Limit, High_Confidence_Limit))
health_wide_two <- Health %>%
group_by(Year, StateDesc, CityName, MeasureId) %>%
summarize(
Data_Value = mean(Data_Value, na.rm = TRUE)
) %>%
pivot_wider(names_from = MeasureId, values_from = c(Data_Value, Low_Confidence_Limit, High_Confidence_Limit))
health_wide_two <- Health %>%
group_by(Year, StateDesc, CityName, MeasureId) %>%
summarize(
Data_Value = mean(Data_Value, na.rm = TRUE)
) %>%
pivot_wider(names_from = MeasureId, values_from = c(Data_Value))
View(health_wide_two)
health_wide_two <- Health %>%
group_by(Year, StateDesc, CityName, MeasureId
) %>%
pivot_wider(names_from = MeasureId, values_from = c(Data_Value))
health_wide_two <- Health %>%
group_by(Year, StateDesc, CityName, MeasureId) %>%
summarize(
Data_Value = mean(Data_Value, na.rm = TRUE)
) %>%
pivot_wider(names_from = MeasureId, values_from = c(Data_Value))
health_wide_two <- Health %>%
group_by(Year, StateDesc, CityName) %>%
summarize(
Data_Value = mean(Data_Value, na.rm = TRUE)
) %>%
pivot_wider(names_from = MeasureId, values_from = c(Data_Value))
health_wide_two <- Health %>%
group_by(Year, StateDesc, CityName, MeasureId) %>%
summarize(
Data_Value = mean(Data_Value, na.rm = TRUE)
) %>%
pivot_wider(names_from = MeasureId, values_from = c(Data_Value))
health_wide_two <- Health %>%
group_by(StateDesc, CityName, MeasureId) %>%
summarize(
Data_Value = mean(Data_Value, na.rm = TRUE)
) %>%
pivot_wider(names_from = MeasureId, values_from = c(Data_Value))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
Health <- Health[complete.cases(Health), ]
health_wide <- Health %>% pivot_wider(names_from = MeasureId, values_from = c(Data_Value, Low_Confidence_Limit, High_Confidence_Limit))
health_wide_two <- Health %>%
group_by(StateDesc, CityName, MeasureId) %>%
summarize(
Data_Value = mean(Data_Value, na.rm = TRUE)
) %>%
pivot_wider(names_from = MeasureId, values_from = c(Data_Value))
View(health_wide_two)
View(health_wide_two)
write_xlsx(health_wide_two, 'C:\\Users\\songb\\Desktop\\data.xlsx')
install.packages("writexl")
library(writexl)
write_xlsx(health_wide_two, 'C:\\Users\\songb\\Desktop\\data.xlsx')
Health <- read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vSUQCYF9DCqMvA-CLuOg_WZBE4DNy8FwTynyv_HMW0am3mAAgHpN7dopDr-DQ0mFaEQhq--dDCmVw3i/pubhtml")
View(Health)
Health <- read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vSUQCYF9DCqMvA-CLuOg_WZBE4DNy8FwTynyv_HMW0am3mAAgHpN7dopDr-DQ0mFaEQhq--dDCmVw3i/pub?output=csv")
View(Health)
Health <- read.csv("https://github.com/gracew-iastate/DS202-Final-Project/blob/main/data.xlsx")
View(Health)
Health <- read.csv("https://github.com/gracew-iastate/DS202-Final-Project/blob/main/data.xlsx")
Health <- read.csv("https://raw.githubusercontent.com/gracew-iastate/DS202-Final-Project/main/data.csv")
Health <- read.csv("https://raw.githubusercontent.com/gracew-iastate/DS202-Final-Project/main/data.xsls")
Health <- read.csv("https://raw.githubusercontent.com/gracew-iastate/DS202-Final-Project/main/data.xslx")
Health <- read.csv("https://raw.githubusercontent.com/bootingabend/DS202-Final-Project/main/data.xslx")
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(tidycensus)
library(dplyr)
library(purrr)
library(readr)
# Define variables
vars <- c(
median_income = "B19013_001",  # Median Household Income
mean_income = "B19025_001",    # Mean Household Income
population = "B01003_001"      # Total Population
)
# Get data for Alcoa, TN
alcoa_data <- get_decennial(geography = "place",
state = "TN",
county = "Blount",
place = "00600",  # Alcoa's FIPS place code
variables = vars,
year = c(1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020))
# Get data for Alcoa, TN
alcoa_data <- get_decennial(geography = "place",
state = "TN",
place = "00600",  # Alcoa's FIPS place code
variables = vars,
year = c(1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020))
# Get data for Alcoa, TN
alcoa_data <- get_decennial(geography = "place",
state = "TN",
county = "Blount",
place = "00600",  # Alcoa's FIPS place code
variables = vars,
year = c(1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2010, 2020))
# Get data for Alcoa, TN
alcoa_data <- get_decennial(geography = "place",
state = "TN",
county = "Blount",
place = "00600",  # Alcoa's FIPS place code
variables = vars,
year = c(1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2010, 2020))
# Get data for Alcoa, TN
alcoa_data <- get_decennial(geography = "place",
state = "TN",
county = "Blount",
place = "00600",  # Alcoa's FIPS place code
variables = vars,
year = c(1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2010, 2020))
variables <- c(
population = "P001001",  # Total Population
median_income = "B19013_001",  # Median Household Income
mean_income = "B19025_001"  # Mean Household Income
)
# Get data for Alcoa, TN
alcoa_data <- get_decennial(
geography = "place",
state = "TN",
place = "00600",  # FIPS Code for Alcoa, TN
variables = variables,
years = c(2000, 2010, 2020),  # Adjust for available census years
sumfile = "sf1"
)
# Get data for Alcoa, TN
alcoa_data <- get_decennial(
geography = "place",
state = "TN",
place = "00600",  # FIPS Code for Alcoa, TN
variables = variables,
years = c(1960, 1970, 1980, 1990, 2000, 2010, 2020),  # Adjust for available census years
)
variables <- c(
# population = "P001001",  # Total Population
median_income = "B19013_001",  # Median Household Income
mean_income = "B19025_001"  # Mean Household Income
)
# Get data for Alcoa, TN
alcoa_data <- get_decennial(
geography = "place",
state = "TN",
place = "00600",  # FIPS Code for Alcoa, TN
variables = variables,
years = c(1960, 1970, 1980, 1990, 2000, 2010, 2020),  # Adjust for available census years
)
variables <- c(
population = "P001001",  # Total Population
median_income = "B19013_001",  # Median Household Income
mean_income = "B19025_001"  # Mean Household Income
)
# Get data for Alcoa, TN
alcoa_data <- get_decennial(
geography = "place",
state = "TN",
place = "00600",  # FIPS Code for Alcoa, TN
variables = variables,
years = c(2000, 2010, 2020),  # Adjust for available census years
)
knitr::opts_chunk$set(echo = TRUE)
# write your code here
library(tidyverse)
pbp <- read.csv("https://raw.githubusercontent.com/DS202-at-ISU/DS202-at-ISU.github.io/master/exams/sample-combined-pbp-stats.csv")
dim(pbp)
length(unique(pbp$game_id))
pbp %>% group_by(game_id) %>% tally() %>% summary()
length(unique(pbp$game_id))
scores <- pbp %>% group_by(game_id, team) %>%
filter(result=="made") %>%
summarise(
score = sum(points),
.groups = 'drop'
)
pbp %>% filter(event_type=="end of period", period==4) %>% select(home_score, away_score, game_id)
winners <- scores %>%
mutate(.by = game_id,
winner = team[which.max(score)],
loser = team[which.min(score)])
players <- pbp %>% group_by(game_id, team, player) %>%
filter(result=="made") %>%
summarise(
score = sum(points),
.groups = 'drop'
) %>%
group_by(game_id, team) %>%
mutate(
mvp = rank(-score)
) %>%
filter(mvp==1)
players
scores %>%
ggplot(aes(reorder(team, score, median), score)) + geom_point() + coord_flip()
pbp %>% group_by(event_type, is.na(converted_x), is.na(converted_y)) %>% tally()
# an alternative solution
pbp %>% group_by(event_type) %>%
summarise(
x_missing = sum(is.na(converted_x)),
y_missing = sum(is.na(converted_y))
)
pbp %>% filter(game_id==21700003) %>%
ggplot(aes(x = converted_x, y = converted_y, colour=team, shape=result)) +
geom_point() + coord_equal()
pbp$d <- with(pbp, sqrt(original_x^2+original_y^2))
pbp %>% filter(team!="") %>%
ggplot(aes(x = result, y = d)) +
facet_grid(.~team) + geom_boxplot()
pbp %>%
ggplot(aes(x = result, y = d)) +
facet_grid(.~team) + geom_boxplot()
filter(team!="") %>%
pbp %>% filter(team!="") %>%
ggplot(aes(x = result, y = d)) +
facet_grid(.~team) + geom_boxplot()
pbp$d <- with(pbp, sqrt(original_x^2+original_y^2))
pbp %>% filter(team!="") %>%
ggplot(aes(x = result, y = d)) +
facet_grid(.~team) + geom_boxplot()
# there is a clear difference in the distance associated with shots made and shots missed. Distance does hurt. Shots that were made tend to be closer to the basket.
```
pbp %>% filter(team!="") %>%
ggplot(aes(x = result, y = d)) +
facet_grid(.~team) + geom_boxplot()
library(lubridate)
pbp <- pbp %>% separate(elapsed, into=c("hour", "minute", "second"), sep=":") %>%
mutate(
elapsed = as.numeric(minute)*60+as.numeric(second),
time_played = elapsed + 12*60*(period-1)
)
pbp %>%
filter(game_id=="21700002") %>%
ggplot(aes(x = time_played, y = event_type,  colour=team)) +
geom_point() +
facet_grid(period~.)
knitr::opts_chunk$set(echo = TRUE)
wallabies <- read.table("http://www.statsci.org/data/oz/wallaby.txt", stringsAsFactors = FALSE, sep="\t", header=TRUE)
head(wallabies)
# your code goes here
dim(wallabies)
View(wallabies)
Animf <- factor(wallabies$Anim)
Sexf <- factor(wallabies$Sex)
Locaf <- factor(wallabies$Loca)
count(is.na(wallabies))
colSums(is.na(wallabies))
library(dplyr)
wallabies %>% ggplot(aes(x = Age, y = Head, color = Sex)) +
geom_point(size = 3) +  # Set point size
labs(title = "Head Length by Age", x = "Age (years)", y = "Head Length (cm)") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
eq <- read.csv("https://raw.githubusercontent.com/DS202-at-ISU/DS202-at-ISU.github.io/master/exams/earthquakes.csv")
eq <- read.csv("https://raw.githubusercontent.com/DS202-at-ISU/DS202-at-ISU.github.io/master/exams/earthquakes.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data("mtcars")
data("diamonds")
data("world_bank_pop")
# your code goes here
dim(mtcars)
# your code goes here
dim(mtcars)
View(mtcars)
nrow(mtcars)
ncol(mtcars)       # There are
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$gear <- factor(mtcars$gear)
mtcars$am <- factor(mtcars$am, labels = c("Automatic", "Manual"))  # Transmission type
# Create the boxplot
ggplot(mtcars, aes(x = reorder(gear, hp, median), y = hp, fill = gear)) +
geom_boxplot() +
labs(title = "Horsepower by Number of Gears",
x = "Number of Gears (Reordered by Median HP)",
y = "Horsepower (hp)") +
theme_minimal()
# Create the boxplot
ggplot(mtcars, aes(x = reorder(gear, hp, median), y = hp, fill = gear)) +
geom_boxplot() +                                                             # This ensures the graph is a boxplot
labs(title = "Horsepower by Number of Gears",                                # This is the title
x = "Number of Gears (Reordered by Median HP)",                         # This is the x-axis title
y = "Horsepower (hp)")
great_diamonds <- subset(diamonds, cut %in% c("Very Good", "Premium", "Ideal"))
str(great_diamonds)
# Verify unique values in 'cut' column
unique(great_diamonds$cut)
# your code goes here
color_counts <- table(great_diamonds$color)
print(color_counts)
names(which.max(color_counts))
View(diamonds)
great_diamonds %>%
count(color) %>%
arrange(desc(n))
# your code goes here
color_counts <- table(great_diamonds$color)
print(color_counts)
names(which.max(color_counts))
great_diamonds %>% count(color) %>% arrange(desc(n))
# Reorder the color levels from J to D
great_diamonds$color <- factor(great_diamonds$color, levels = c("J", "I", "H", "G", "F", "E", "D"))
# Check the new order
levels(great_diamonds$color)
ggplot(great_diamonds, aes(x = color)) +
geom_bar(fill = "steelblue") +
facet_wrap(~ cut) +
labs(title = "Frequency of Diamonds by Color (Ordered J to D)",
x = "Diamond Color",
y = "Count") +
theme_minimal()
avg_price <- great_diamonds %>%
group_by(color, cut) %>%
summarize(avg_price = mean(price, na.rm = TRUE))
ggplot(avg_price, aes(x = color, y = avg_price)) +
geom_col(fill = "steelblue") +
facet_wrap(~ cut) +
labs(title = "Average Diamond Price by Color (Ordered J to D)",
x = "Diamond Color",
y = "Average Price (USD)") +
theme_minimal()
ggplot(avg_price, aes(x = color, y = avg_price)) +
geom_col() +
facet_wrap(~ cut) +
labs(title = "Average Diamond Price by Color (Ordered J to D)",
x = "Diamond Color",
y = "Average Price (USD)") +
theme_minimal()
ggplot(great_diamonds, aes(x = color)) +
geom_bar() +
facet_wrap(~ cut) +
labs(title = "Frequency of Diamonds by Color (Ordered J to D)",
x = "Diamond Color",
y = "Count") +
theme_minimal()
great_diamonds %>% count(cut) %>% arrange(desc(n))
diamonds %>% count(cut) %>% arrange(desc(n))
?world_bank_pop
world_bank_pop_long <- world_bank_pop %>%
pivot_longer(cols = `2000`:`2017`,  # Select columns from 2000 to 2017
names_to = "year",     # New column for years
values_to = "value")   # New column for values
glimpse(world_bank_pop_long)
View(world_bank_pop_long)
View(world_bank_pop)
pop_growth <- subset(world_bank_pop_long, 'SP.POP.GROW' %in% in c(2014, 2015, 2016, 2017))
pop_growth <- world_bank_pop_long %>%
filter(year >= 2014 & year <= 2017 & indicator == 'SP.POP.GROW')
View(pop_growth)
pop_growth %>%
group_by(country) %>%
summarise(average_growth = mean(population_growth, na.rm = TRUE))
pop_growth %>%
group_by(country) %>%
summarise(average_growth = mean(pop_growth, na.rm = TRUE))
pop_growth %>%
group_by(country) %>%
summarise(average_growth = mean(value, na.rm = TRUE))
pop_growth %>%
group_by(country) %>%
summarise(average_growth = mean(value, na.rm = TRUE), sort(desc))
pop_growth %>%
group_by(country) %>%
summarise(average_growth = mean(value, na.rm = TRUE)) %>%
arrange(desc(n))
pop_growth %>%
group_by(country) %>%
summarise(average_growth = mean(value, na.rm = TRUE)) %>%
arrange(average_growth)
pop_growth %>%
group_by(country) %>%
summarise(average_growth = mean(value, na.rm = TRUE)) %>%
arrange(asc(average_growth))
pop_growth %>%
group_by(country) %>%
summarise(average_growth = mean(value, na.rm = TRUE)) %>%
arrange(average_growth)
pop_growth %>%
group_by(country) %>%
summarise(average_growth = mean(value, na.rm = TRUE)) %>%
arrange(desc(average_growth))
# code and comments
Top8 <- pop_growth %>%
group_by(country) %>%
summarise(average_growth = mean(value, na.rm = TRUE)) %>%
arrange(desc(average_growth)) %>%
slice_head(n = 8)
View(Top8)
top_8_growth_by_country <- data %>%
group_by(country) %>%
summarise(average_growth = mean(population_growth, na.rm = TRUE)) %>%
arrange(desc(average_growth)) %>%
slice_head(n = 8)
# Subset the data to include only the top 8 countries
top_8_data <- pop_growth %>%
filter(country %in% top_8_growth_by_country$country)
View(Top8)
# Subset the data to include only the top 8 countries
top_8_data <- pop_growth %>%
filter(pop_growth$country %in% top_8_growth_by_country$country)
Top8 <- Top8$country
# Subset the data to include only the top 8 countries
top_8_data <- pop_growth %>%
filter(pop_growth$country %in% top_8_growth_by_country$country)
# Subset the data to include only the top 8 countries
top_8_data <- pop_growth %>%
filter(pop_growth$country %in% Top8$country)
# Subset the data to include only the top 8 countries
Top8 <- pop_growth %>%
filter(pop_growth$country %in% Top8)
# Convert 'year' from character to numeric
Top8$year <- as.numeric(Top8$year)
# Create a line chart using ggplot2
ggplot(Top8, aes(x = year, y = value, color = country, group = country)) +
geom_line() +
labs(title = "Population Growth by Year (Top 8 Countries)",
x = "Year",
y = "Population Growth") +
theme_minimal() +
theme(legend.position = "right")
ggplot(Top8, aes(x = year, y = value, color = country)) + # This
geom_line() +
labs(title = "Population Growth by Year (Top 8 Countries)",
x = "Year",
y = "Population Growth") +
theme_minimal() +
theme(legend.position = "right")
ggplot(Top8, aes(x = year, y = value, color = country)) + # We do not need to clarify how the countries are grouped because 'color' is a grouping
geom_line() +
labs(title = "Population Growth by Year (Top 8 Countries)",
x = "Year",
y = "Population Growth") +
```
ggplot(Top8, aes(x = year, y = value, color = country)) + # We do not need to clarify how the countries are grouped because 'color' is a grouping
geom_line() +
labs(title = "Population Growth by Year (Top 8 Countries)",
x = "Year",
y = "Population Growth")
Top8 <- pop_growth %>%
group_by(country) %>%
summarise(average_growth = mean(value, na.rm = TRUE)) %>%
arrange(desc(average_growth)) %>%
slice_head(n = 8)
